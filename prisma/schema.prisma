// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Define the `User` table in the database

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role?     @relation(fields: [roleId], references: [id])
  roleId    Int?
  student   Student?
  lecturer  Lecturer?
  voter     Voter?
  createdAt DateTime  @default(now())
}

model Student {
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int         @id
  faculty   Faculty?    @relation(fields: [facultyId], references: [id])
  facultyId Int?
  candidate Candidate[] @relation("ManyToOneCandidateToStudent")
}

model Lecturer {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @id
  faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId Int?
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  Users     User[]
  createdAt DateTime @default(now())
}

model Faculty {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  students  Student[]
  lecturers Lecturer[]
  elections Election[]
  createdAt DateTime   @default(now())
}

model Election {
  id         Int                @id @default(autoincrement())
  name       String             @unique
  faculty    Faculty?           @relation(fields: [facultyId], references: [id])
  facultyId  Int?
  positions  ElectivePosition[]
  candidates Candidate[]
  votes Vote[]
  createdAt  DateTime           @default(now())
}

model ElectivePosition {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  status     Int         @default(1)
  candidates Candidate[]
  elections  Election[]
  votes      Vote[]
  createdAt  DateTime    @default(now())
}

// Define the data model for election candidates
model Candidate {
  id         Int              @id @default(autoincrement())
  name       String
  manifesto  String?
  imageUrl   String?
  votes      Vote[]
  student    Student          @relation("ManyToOneCandidateToStudent", fields: [studentId], references: [userId])
  studentId  Int
  position   ElectivePosition @relation(fields: [positionId], references: [id])
  positionId Int
  election   Election         @relation(fields: [electionId], references: [id])
  electionId Int
  createdAt  DateTime         @default(now())

  @@unique([studentId, electionId])
}

model Voter {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  votes  Vote[]
}

model Vote {
  id                 Int              @id @default(autoincrement())
  voter              Voter            @relation(fields: [voterId], references: [id])
  voterId            Int
  position           ElectivePosition @relation(fields: [electionPositionId], references: [id])
  electionPositionId Int
  candidate          Candidate        @relation(fields: [candidateId], references: [id])
  candidateId        Int
  election   Election         @relation(fields: [electionId], references: [id])
  electionId Int
  createdAt          DateTime         @default(now())
  @@unique([voterId, electionPositionId, electionId])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}